//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public PlayerIndexComponent playerIndex { get { return (PlayerIndexComponent)GetComponent(InputComponentIds.PlayerIndex); } }
        public bool hasPlayerIndex { get { return HasComponent(InputComponentIds.PlayerIndex); } }

        public Entity AddPlayerIndex(PlayerIndex newValue) {
            var component = CreateComponent<PlayerIndexComponent>(InputComponentIds.PlayerIndex);
            component.value = newValue;
            return AddComponent(InputComponentIds.PlayerIndex, component);
        }

        public Entity ReplacePlayerIndex(PlayerIndex newValue) {
            var component = CreateComponent<PlayerIndexComponent>(InputComponentIds.PlayerIndex);
            component.value = newValue;
            ReplaceComponent(InputComponentIds.PlayerIndex, component);
            return this;
        }

        public Entity RemovePlayerIndex() {
            return RemoveComponent(InputComponentIds.PlayerIndex);
        }
    }
}

    public partial class InputMatcher {

        static IMatcher _matcherPlayerIndex;

        public static IMatcher PlayerIndex {
            get {
                if(_matcherPlayerIndex == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.PlayerIndex);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherPlayerIndex = matcher;
                }

                return _matcherPlayerIndex;
            }
        }
    }

    public partial class ObjectsMatcher {

        static IMatcher _matcherPlayerIndex;

        public static IMatcher PlayerIndex {
            get {
                if(_matcherPlayerIndex == null) {
                    var matcher = (Matcher)Matcher.AllOf(ObjectsComponentIds.PlayerIndex);
                    matcher.componentNames = ObjectsComponentIds.componentNames;
                    _matcherPlayerIndex = matcher;
                }

                return _matcherPlayerIndex;
            }
        }
    }
